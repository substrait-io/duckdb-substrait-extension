# name: test/sql/test_substrait_enable_optimizer.test
# description: Test conversion of DuckDB built-in function names to Substrait function names
# group: [sql]

require substrait

statement ok
PRAGMA enable_verification

statement ok
CREATE table ints (i INT);

statement ok
INSERT INTO ints VALUES (20), (8), (99), (3000);

# optimized
statement ok
CALL get_substrait('SELECT abs(i) FROM ints');

# unoptimized
statement ok
CALL get_substrait('SELECT abs(i) FROM ints', enable_optimizer=false);

statement ok
CREATE table tbl (v varchar);

statement ok
insert into tbl VALUES('hi'), ('universe'), ('ducky');

# When the optimizer is enabled at the connection level, the default behavior should be to generate optimized Substrait.
statement ok
PRAGMA enable_optimizer

# An optimized DuckDB query plan often substitutes the LIKE operator for other operations/functions such as: equal, is_not_null, ends_with
query I
CALL get_substrait('select * from tbl where v LIKE ''%y''');
----
<REGEX>:.*ends_with:string_string.*

# If substitution is not desirable, an unoptimized plan can be used instead.
query I
CALL get_substrait('select * from tbl where v LIKE ''%y''', enable_optimizer=false);
----
<REGEX>:.*like:string_string.*

# Alternatively, the optimizer can be disabled at the connection level, which will also disable optimizing Substrait plans.
statement ok
PRAGMA disable_optimizer

query I
CALL get_substrait('select * from tbl where v LIKE ''duck%''');
----
<REGEX>:.*like:string_string.*

# But the `enable_optimizer` option takes precedence over the connection-level settings.
query I
CALL get_substrait('select * from tbl where v LIKE ''duck%''', enable_optimizer=true);
----
<REGEX>:.*gte:string_string.*

# Finally, the user can disable specific optimizers when generating Substrait by changing the connection-level settings.
statement ok
PRAGMA disabled_optimizers = 'expression_rewriter'

query I
CALL get_substrait('select * from tbl where v LIKE ''%y''', enable_optimizer=true);
----
<REGEX>:.*like:string_string.*

# Same as above but with optimizer enabled by default (`expression_rewriter` is still disabled).
statement ok
PRAGMA enable_optimizer

query I
CALL get_substrait('select * from tbl where v LIKE ''%y''');
----
<REGEX>:.*like:string_string.*

# Reset for JSON tests.
statement ok
PRAGMA disabled_optimizers = ''

# Sanity check that settings are restored
query I
CALL get_substrait('select * from tbl where v LIKE ''%univ%''');
----
<REGEX>:.*contains:string_string.*

# ---------------------------- Same tests with JSON ----------------------------

statement ok
CREATE table ints_json (i INT);

statement ok
INSERT INTO ints_json VALUES (20), (8), (99), (3000);

# query plan from an optimised Duckdb query plan  
statement ok
CALL get_substrait_json('SELECT abs(i) FROM ints_json');

# query plan from an unoptimised Duckdb query plan
statement ok
CALL get_substrait_json('SELECT abs(i) FROM ints_json', enable_optimizer=false);

statement ok
CREATE table tbl_json (v varchar);

statement ok
insert into tbl_json VALUES ('hi'), ('universe'), ('ducky');

# An optimized DuckDB query plan often substitutes the LIKE operator for other operations/functions such as: equal, is_not_null, ends_with
query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''%y''');
----
<REGEX>:.*ends_with:string_string.*

# If substitution is not desirable, an unoptimized plan can be used instead.
query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''%y''', enable_optimizer=false);
----
<REGEX>:.*like:string_string.*

# Alternatively, the optimizer can be disabled at the connection level, which will also disable optimizing Substrait plans.
statement ok
PRAGMA disable_optimizer

query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''duck%''');
----
<REGEX>:.*like:string_string.*

# But the `enable_optimizer` option takes precedence over the connection-level settings.
query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''duck%''', enable_optimizer=true);
----
<REGEX>:.*gte:string_string.*

# Finally, the user can disable specific optimizers when generating Substrait by changing the connection-level settings.
statement ok
PRAGMA disabled_optimizers = 'expression_rewriter'

query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''%y''', enable_optimizer=true);
----
<REGEX>:.*like:string_string.*

# Same as above but with optimizer enabled by default (`expression_rewriter` is still disabled).
statement ok
PRAGMA enable_optimizer

query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''%y''');
----
<REGEX>:.*like:string_string.*

# Reset
statement ok
PRAGMA disabled_optimizers = ''

# Sanity check that settings are restored
query I
CALL get_substrait_json('select * from tbl_json where v LIKE ''%univ%''');
----
<REGEX>:.*contains:string_string.*
